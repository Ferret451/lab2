Program lab2;

{$APPTYPE CONSOLE}

Uses
  System.SysUtils;

Type
  TArray = array [1..3000] of Integer;
  TAmOfIters = record
      ShellTheor: integer;
      ShellPract: integer;
      SelectionTheor: integer;
      SelectionPract: integer;
  end;
  TResults = record
    RandArrays: TAmOfIters;
    SortedArrays: TAmOfIters;
    ReversedArrays: TAmOfIters;
  end;

Const
  AmountsOfEl: array [1..6] of Integer = (100, 250, 500, 1000, 2000, 3000);
  //AmountsOfEl - possible amounts of elements

Var
  RandElements, SortElements, RevElements: TArray;
  ResultsOfSorts: array [1..6] of TResults;
  i: integer;
  //Elements - user elements to sort
  //ResultsOfSorts - struct of theorical and practical amounts of iterations
  //i - iterator for cycles

//Proc for making array
Procedure MakeArray(var ArrToMake: TArray; const AmountOfEl: integer; const Request: string);
Var
  i: integer;
  //i - iterator for cycles

Begin

  //Arr with random numbers
  if Request = 'Rand' then
    for i := 1 to AmountOfEl do
    begin
      Randomize;
      ArrToMake[i] := Random(100) + 1;
    end
  else
    //Arr with sorted numbers
    if  Request = 'Sorted' then
      for i := 1 to AmountOfEl do
      begin
        ArrToMake[i] := i;
      end
    else
      //Arr with sorted and reversed numbers
      if  Request = 'Reversed' then
        for i := AmountOfEl downto 1 do
        begin
          ArrToMake[AmountOfEl - i + 1] := i;
        end;
End;

//Proc to swap value of variables
Procedure Swap(var AFirstEl, ASecondEl: integer);
Var
  Buf: integer;
  //Buf - variable to swap to elements
Begin
  Buf := AFirstEl;
  AFirstEl := ASecondEl;
  ASecondEl := Buf;
End;

//Proc for ShellSort
Procedure ShellSort(AArrToSort: TArray; const AAmountOfEl: integer; var ARealAmOfIters: integer);
Var
  i, j, AmOfStep, CurrStep: integer;
  //i, j - iterators
  //AmOfStep - amount if steps for sorting
  //CurrStep - step for current itteration

Begin
  //Determinating amount of steps
  AmOfStep := round(ln(AAmountOfEl)/ln(3) - 1);

  //Finding max step
  CurrStep := 1;
  for i := 1 to AmOfStep do
    CurrStep := CurrStep * 3 + 1;

  //Sorting array
  while CurrStep >= 1 do
  begin

    //Going trough array
    i := 1;
    while i + CurrStep <= AAmountOfEl do
    begin
      inc(ARealAmOfIters);

      //Going back to beggining and swapping while needed
      if AArrToSort[i] > AArrToSort[i + CurrStep] then
      begin
        //j is for saving value of i
        j := i;

        repeat
          Swap(AArrToSort[j], AArrToSort[j + CurrStep]);
          j := j - CurrStep;

          inc(ARealAmOfIters);
        until (AArrToSort[j] <= AArrToSort[j + CurrStep]) or (j < 1);
      end;

      inc(i);
    end;

    //Changing step
    CurrStep := CurrStep div 3;
  end;
End;

Procedure SelectionSort(ArrToSort: TArray; const AAmountOfEl: integer; var ARealAmOfIters: integer);
Var
  i, j, currMin: integer;
  //i, j - iterators
  //currMin - max for current iteration

Begin
  //Starting from first element
  i := 1;

  //Sorting array
  while i < AAmountOfEl do
  begin
    //Assigning starting value for min
    currMin := ArrToSort[i];

    //Finding current min
    for j := i + 1 to AAmountOfEl do
    begin
      inc(ARealAmOfIters);

      if ArrToSort[j] < currMin then
        currMin := ArrToSort[j];
    end;

    //Swapping with current first element if less value was found
    inc(ARealAmOfIters);

    if currMin <> ArrToSort[i] then
      Swap(currMin, ArrToSort[i]);

    inc(i);
  end;
End;

function ShellTheorCalc(const AAmOfElements: Integer): Integer;
begin
  Result := AmountsOfEl[i] * Round(sqr(ln(AmountsOfEl[i]) / ln(2)));
end;

Begin
  //Making arrays with random, sorted and reversed elements
  MakeArray(RandElements, 3000, 'Rand');
  MakeArray(SortElements, 3000, 'Sorted');
  MakeArray(RevElements, 3000, 'Reversed');

  //Going trough all amounts of elements
  for i := 1 to length(AmountsOfEl) do
  begin

    //RANDOM PART
    //Getting theorical and practical amount of itarations
    //Shell sort
    ResultsOfSorts[i].RandArrays.ShellTheor := ShellTheorCalc(AmountsOfEl[i]);
    ShellSort(RandElements, AmountsOfEl[i], ResultsOfSorts[i].RandArrays.ShellPract);

    //Selection sort
    ResultsOfSorts[i].RandArrays.SelectionTheor := AmountsOfEl[i] * Round(sqr(ln(AmountsOfEl[i]) / ln(2)));
    SelectionSort(RandElements, AmountsOfEl[i], ResultsOfSorts[i].RandArrays.SelectionPract);


    //SORTED PART
    //Getting theorical and practical amount of itarations
    //Shell sort
    ResultsOfSorts[i].SortedArrays.ShellTheor := round(exp(ln(AmountsOfEl[i]) * 1.25));
    ShellSort(SortElements, AmountsOfEl[i], ResultsOfSorts[i].SortedArrays.ShellPract);

    //Selection sort
    ResultsOfSorts[i].SortedArrays.SelectionTheor := AmountsOfEl[i] * Round(sqr(ln(AmountsOfEl[i]) / ln(2)));
    SelectionSort(SortElements, AmountsOfEl[i], ResultsOfSorts[i].SortedArrays.SelectionPract);

    //REVERSED PART
    //Getting theorical and practical amount of itarations
    //Shell sort
    ResultsOfSorts[i].ReversedArrays.ShellTheor := round(exp(ln(AmountsOfEl[i]) * 1.25));
    ShellSort(RevElements, AmountsOfEl[i], ResultsOfSorts[i].ReversedArrays.ShellPract);

    //Selection sort
    ResultsOfSorts[i].ReversedArrays.SelectionTheor := AmountsOfEl[i] * Round(sqr(ln(AmountsOfEl[i]) / ln(2)));
    SelectionSort(RevElements, AmountsOfEl[i], ResultsOfSorts[i].ReversedArrays.SelectionPract);
  end;

  //Outputting results in table form
  writeln(' _________________________________________________________________________________');
  writeln('|                    |            |       Shell Sort      |     Selection sort    |');
  writeln('| Amount of elements | Array type |_______________________|_______________________|');
  writeln('|                    |            | Practical | Theorical | Practical | Theorical |');
  for i := 1 to length(AmountsOfEl) do
  begin
    //Part with random
    writeln('|____________________|____________|___________|___________|___________|___________|');
    writeln('|', AmountsOfEl[i]:14, '      |  Random    |', ResultsOfSorts[i].RandArrays.ShellPract:8, '   |', ResultsOfSorts[i].RandArrays.ShellTheor:8, '   |', ResultsOfSorts[i].RandArrays.SelectionPract:8, '   |', ResultsOfSorts[i].RandArrays.SelectionTheor:8, '   |');

    //Part with sorted
    writeln('|____________________|____________|___________|___________|___________|___________|');
    writeln('|                    |  Sorted    |', ResultsOfSorts[i].SortedArrays.ShellPract:8, '   |', ResultsOfSorts[i].SortedArrays.ShellTheor:8, '   |', ResultsOfSorts[i].SortedArrays.SelectionPract:8, '   |', ResultsOfSorts[i].SortedArrays.SelectionTheor:8, '   |');

    //Part with reverse
    writeln('|____________________|____________|___________|___________|___________|___________|');
    writeln('|                    |  Reversed  |', ResultsOfSorts[i].ReversedArrays.ShellPract:8, '   |', ResultsOfSorts[i].ReversedArrays.ShellTheor:8, '   |', ResultsOfSorts[i].ReversedArrays.SelectionPract:8, '   |', ResultsOfSorts[i].ReversedArrays.SelectionTheor:8, '   |');
  end;
  writeln('|____________________|____________|___________|___________|___________|___________|');


  readln;
End.
